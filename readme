Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Isaac Wolfe

------------------------------------------------------------------------
What authorized sources of information did you use to complete
the assignment? COPY THE LIST of authorized sources of information
given in the "Policies" web page to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website.
Such documents include the course's lecture slides and precept
handouts.

The course's textbooks.

The course's current staff members outside of class time through
Piazza. (Asked one question)

I consulted with 2 former COS 217 students in a conceptual interaction
that could have legitimately appeared on the course's Piazza account. 

Went to Lab TAs and worked with Uri to sort out a final bug that I 
had been studying for HOURS AND HOURS and could not fix. Turns out
there was a stray semi-colon hiding after a loop statement... 
Horrible vibes.

Additional help from Alan with the Makefile.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None.

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

Fairly helpful! Was glad to learn about using different object types 
in c.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."


testsymtable.c:796:7: Buffer overflow possible with sprintf.  Recommend 
using snprintf instead: sprintf
  Use of function that may lead to buffer overflow. (Use -bufferoverflowhigh to
  inhibit warning)
testsymtable.c:813:7: Buffer overflow possible with sprintf.  Recommend 
using snprintf instead: sprintf

(And others like above)

Disagreement: As specified in the assignment specs, we are meant to 
ignore this warning as the number of characters being asisgned is 
known and because "snprintf" is not part of the C90 standard and
would thus generate a warning for gcc217 (which is more important).

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 85: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablelist.c: line 111: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablelist.c: line 220: medium priority:
Do you want to validate 'pvExtra' through an assert?

I did not use assert to validate any of these variables because these
variables are allowed to be NULL. The client may want to store NULL
values or just maintain a Symbol Table of keys. Thus, pvValue can be 
NULL. pvExtra is, in fact, an "extra" parameter to the function 
SymTable_map(...). Thus, it can also be NULL. 

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

testsymtable.c:796:7: Buffer overflow possible with sprintf.  Recommend using
snprintf instead: sprintf
  Use of function that may lead to buffer overflow. (Use -bufferoverflowhigh to
  inhibit warning)
testsymtable.c:813:7: Buffer overflow possible with sprintf.  Recommend using
snprintf instead: sprintf

(And others like above)

Disagreement: As specified in the assignment specs, we are meant to 
ignore this warning as the number of characters being asisgned is 
known and because "snprintf" is not part of the C90 standard and
would thus generate a warning for gcc217 (which is more important).

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 201: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablehash.c: line 246: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablehash.c: line 384: medium priority:
Do you want to validate 'pvExtra' through an assert?

I did not use assert to validate any of these variables because these
variables are allowed to be NULL. The client may want to store NULL
values or just maintain a Symbol Table of keys. Thus, pvValue can be 
NULL. pvExtra is, in fact, an "extra" parameter to the function 
SymTable_map(...). Thus, it can also be NULL. 

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 1.000000 seconds.
-- 50000 bindings consumed 98.690000 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010000 seconds.
-- 50000 bindings consumed 0.0.390000 seconds.
-- 500000 bindings consumed 67.280000 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010000 seconds.
-- 50000 bindings consumed 0.170000 seconds.
-- 500000 bindings consumed 2.040000 seconds.

